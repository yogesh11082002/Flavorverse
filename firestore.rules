/**
 * @fileoverview Firestore Security Rules for FlavorVerse.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection, enforcing strict ownership for user profiles and allowing public read access to dishes while controlling write access based on ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the owner.
 * - /dishes/{dishId}: Publicly readable collection of dishes, with owner-only write access.
 * - /dishes/{dishId}/comments/{commentId}: Stores comments for a specific dish; create, read and write rules are open, but only authenticated users can perform any action.
 * - /dishes/{dishId}/likes/{userId}: Stores likes for a specific dish, the document id is the ID of the user who liked it; the user can create a like, but only if they are logged in.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Public read access is granted to the /dishes collection to allow for open browsing.
 *
 * Denormalization for Authorization:
 * - The `Dish` entity requires a `userId` field to track the dish's owner and ensure secure write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data.
     * @path /users/{userId}
     * @allow (create) - If the user's UID matches the userId.
     * @allow (get, update, delete) - If the user's UID matches the userId.
     * @deny (list) - User listing is not permitted.
     * @deny (create) - If the user's UID does not match the userId.
     * @deny (get, update, delete) - If the user's UID does not match the userId.
     * @principle Enforces user-ownership for data access.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages publicly available dishes with owner-only writes.
     * @path /dishes/{dishId}
     * @allow (get, list) - Anyone can read the dishes.
     * @allow (create) - If the request includes a `userId` field matching the authenticated user.
     * @allow (update, delete) - If the user's UID matches the `userId` in the existing dish document.
     * @deny (create) - If the request does not include a `userId` field matching the authenticated user.
     * @deny (update, delete) - If the user's UID does not match the `userId` in the existing dish document.
     * @principle Allows public reads with owner-only writes for dishes.
     */
    match /dishes/{dishId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages comments for specific dishes.
     * @path /dishes/{dishId}/comments/{commentId}
     * @allow (get, list, create, update, delete) - If the user is signed in.
     */
    match /dishes/{dishId}/comments/{commentId} {
      allow get, list, create, update, delete: if isSignedIn();
    }

     /**
      * @description Manages likes for a specific dish, where documentId is userId.
      * @path /dishes/{dishId}/likes/{userId}
      * @allow (create) - If the user is signed in and the userId matches the document ID.
      * @allow (get, list) - Anyone can view likes.
      * @allow (delete) - If the user is signed in and the userId matches the document ID.
      * @deny (update) - Likes cannot be updated once created.
      */
    match /dishes/{dishId}/likes/{userId} {
        allow get, list: if true;
        allow create: if isSignedIn() && userId == request.auth.uid;
        allow update: if false;
        allow delete: if isSignedIn() && userId == request.auth.uid && resource != null;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's UID.
     * @param {string} userId The user ID to compare with the authenticated user's UID.
     * @return {bool} True if the user ID matches the authenticated user's UID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && userId == request.auth.uid;
    }

    /**
     * @description Checks if the user ID matches the authenticated user's UID, and the resource exists.
     * @param {string} userId The user ID to compare with the authenticated user's UID.
     * @return {bool} True if the user ID matches the authenticated user's UID, and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}