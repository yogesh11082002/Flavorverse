/**
 * @fileoverview Firestore Security Rules for FlavorVerse.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection while allowing public access to dishes.
 * Users can only manage their own profiles and like dishes. Dishes are publicly visible,
 * but only the creator can modify or delete them. Likes are public but tied to the user id.
 * Comments are publicly visible.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owning user.
 * - /dishes/{dishId}: Stores dish information, publicly readable, owner-writable.
 * - /dishes/{dishId}/comments/{commentId}: Stores comments for each dish, publicly readable and writable.
 * - /dishes/{dishId}/likes/{userId}: Stores likes for each dish; the document ID is the user ID.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Dishes are publicly readable, but only the creator can modify or delete them.
 * - Comments are publicly readable and writable, but there is no moderation.
 * - Listing of user documents is denied to prevent data scraping.
 * - Likes are public.
 *
 * Denormalization for Authorization:
 * - Dishes store the userId of the creator to enforce ownership for updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) If the user's UID matches the userId in the path.
     * @allow (get, update, delete) If the user is the owner of the profile.
     * @deny (list) Prevents listing all user profiles.
     * @deny (create, update, delete) If the user is not the owner.
     * @principle Enforces user-ownership for profile management.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to dishes.
     * @path /dishes/{dishId}
     * @allow (get, list) Public read access for all dishes.
     * @allow (create) If the request includes a userId matching the authenticated user's UID.
     * @allow (update, delete) If the user is the owner of the dish.
     * @deny (create, update, delete) If the user is not the owner.
     * @principle Allows public reading but enforces ownership for modification.
     */
    match /dishes/{dishId} {
      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }

      function isCreatingOwner() {
        return request.resource.data.userId == request.auth.uid;
      }

      function isExistingOwner() {
        return isOwner() && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isCreatingOwner();
      allow update: if isSignedIn() && isExistingOwner();
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to comments on dishes.
     * @path /dishes/{dishId}/comments/{commentId}
     * @allow (get, list, create, update, delete) Public access to all comments.
     * @principle Allows open commenting on dishes.
     */
    match /dishes/{dishId}/comments/{commentId} {
      allow get, list, create, update, delete: if true;
    }

      /**
       * @description Controls access to likes on dishes.
       * @path /dishes/{dishId}/likes/{userId}
       * @allow (get, list, create, update, delete) Public access to all likes.
       */
      match /dishes/{dishId}/likes/{userId} {
        allow get, list, create, update, delete: if true;
      }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}